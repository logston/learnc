`input.dat` contains flight information for cities within the US. Each line
contains three tab-separated fields: the departure city, the arrival city, and
the cost of a plane ticket between the two.

Because this information represents a sparse graph, the best data structure to
contain it is an adjacency list. Build an adjacency list to store this
information. Build a main programme called `agent` that can answer two
questions:
	- is it possible to fly from city A to city B?
	- what is the cheapest set of plane tickets to take you from city A to city B?

Build the adjacency list using a hash map. You can choose either probing or
chain for your collision strategy.

You can use `djb2` as your hash function:
	http://www.cse.yorku.ca/~oz/hash.html

The repo includes the following files
	- agent.c (a stub for your programme)
	- agent.py (a Python implementation of `agent`, use it to guide output)
	- cities.dat (a list of the top 200-cities in the US; used to create `input.dat`)
	- input.dat (random input generated by Makefile)
	- Makefile (important targets: `make agent` `make clean` `make test`)
	- README (this file)
